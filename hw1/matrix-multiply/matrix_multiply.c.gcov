        -:    0:Source:matrix_multiply.c
        -:    0:Graph:matrix_multiply.gcno
        -:    0:Data:matrix_multiply.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/**
        -:    2: * Copyright (c) 2012 MIT License by 6.172 Staff
        -:    3: *
        -:    4: * Permission is hereby granted, free of charge, to any person obtaining a copy
        -:    5: * of this software and associated documentation files (the "Software"), to
        -:    6: * deal in the Software without restriction, including without limitation the
        -:    7: * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
        -:    8: * sell copies of the Software, and to permit persons to whom the Software is
        -:    9: * furnished to do so, subject to the following conditions:
        -:   10: *
        -:   11: * The above copyright notice and this permission notice shall be included in
        -:   12: * all copies or substantial portions of the Software.
        -:   13: *
        -:   14: * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
        -:   15: * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
        -:   16: * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
        -:   17: * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
        -:   18: * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
        -:   19: * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
        -:   20: * IN THE SOFTWARE.
        -:   21: **/
        -:   22:
        -:   23:#include "./matrix_multiply.h"
        -:   24:
        -:   25:#include <stdio.h>
        -:   26:#include <stdlib.h>
        -:   27:#include <unistd.h>
        -:   28:#include <sys/types.h>
        -:   29:#include <sys/stat.h>
        -:   30:#include <sys/mman.h>
        -:   31:#include <fcntl.h>
        -:   32:#include <math.h>
        -:   33:#include <string.h>
        -:   34:
        -:   35:#include "./tbassert.h"
        -:   36:
        -:   37:// Allocates a row-by-cols matrix and returns it
        3:   38:matrix* make_matrix(int rows, int cols) {
        3:   39:  matrix* new_matrix = malloc(sizeof(matrix));
        -:   40:
        -:   41:  // Set the number of rows and columns
        3:   42:  new_matrix->rows = rows;
        3:   43:  new_matrix->cols = cols;
        -:   44:
        -:   45:  // Allocate a buffer big enough to hold the matrix.
        3:   46:  new_matrix->values = (int**)malloc(sizeof(int*) * rows);
       15:   47:  for (int i = 0; i < rows; i++) {
       12:   48:    new_matrix->values[i] = (int*)malloc(sizeof(int) * cols);
       60:   49:    for (int j = 0; j < new_matrix->cols; j++) {
       48:   50:        new_matrix->values[i][j] = 0;  // Initialize all elements
       48:   51:    }
       12:   52:  }
        -:   53:
        3:   54:  return new_matrix;
        -:   55:}
        -:   56:
        -:   57:// Frees an allocated matrix
        3:   58:void free_matrix(matrix* m) {
       15:   59:  for (int i = 0; i < m->rows; i++) {
       12:   60:    free(m->values[i]);
       12:   61:  }
        3:   62:  free(m->values);
        3:   63:  free(m);
        3:   64:}
        -:   65:
        -:   66:// Print matrix
        3:   67:void print_matrix(const matrix* m) {
        3:   68:  printf("------------\n");
       15:   69:  for (int i = 0; i < m->rows; i++) {
       60:   70:    for (int j = 0; j < m->cols; j++) {
       48:   71:      printf("  %3d  ", m->values[i][j]);
       48:   72:    }
       12:   73:    printf("\n");
       12:   74:  }
        3:   75:  printf("------------\n");
        3:   76:}
        -:   77:
        -:   78:
        -:   79:// Multiply matrix A*B, store result in C.
        1:   80:int matrix_multiply_run(const matrix* A, const matrix* B, matrix* C) {
        -:   81:
        1:   82:  tbassert(A->cols == B->rows,
        -:   83:           "A->cols = %d, B->rows = %d\n", A->cols, B->rows);
        1:   84:  tbassert(A->rows == C->rows,
        -:   85:           "A->rows = %d, C->rows = %d\n", A->rows, C->rows);
        1:   86:  tbassert(B->cols == C->cols,
        -:   87:           "B->cols = %d, C->cols = %d\n", B->cols, C->cols);
        -:   88:
        5:   89:  for (int i = 0; i < A->rows; i++) {
       20:   90:    for (int j = 0; j < B->cols; j++) {
       80:   91:      for (int k = 0; k < A->cols; k++) {
       64:   92:        C->values[i][j] += A->values[i][k] * B->values[k][j];
       64:   93:      }
       16:   94:    }
        4:   95:  }
        -:   96:
        1:   97:  return 0;
        -:   98:}
